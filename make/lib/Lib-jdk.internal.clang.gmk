#
# Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

include LibCommon.gmk

################################################################################

ifeq ($(ENABLE_LIBCLANG), true)

  LIBJCLANG_SRC := \
      $(TOPDIR)/src/jdk.internal.clang/share/native/libjclang

  $(eval $(call SetupNativeCompilation,BUILD_LIBJCLANG, \
      NAME := jclang, \
      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
      SRC := $(LIBJCLANG_SRC), \
      LANG := C++, \
      OPTIMIZATION := LOW, \
      CFLAGS := $(CFLAGS_JDKLIB) \
          $(LIBCLANG_CPPFLAGS), \
      LDFLAGS := $(LDFLAGS_JDKLIB) $(LIBCLANG_LDFLAGS), \
      LIBS := -ljsig $(LIBCLANG_LIBS), \
      VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \
      RC_FLAGS := $(RC_FLAGS) \
          -D "JDK_FNAME=jclang.dll" \
          -D "JDK_INTERNAL_NAME=jclang" \
          -D "JDK_FTYPE=0x2L", \
      OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libjclang, \
      DEBUG_SYMBOLS := $(DEBUG_ALL_BINARIES)))

  TARGETS += $(BUILD_LIBJCLANG)

  $(eval $(call SetupCopyFiles, COPY_CLANG_LIB, \
      FILES := $(wildcard $(CLANG_LIB_PATH)/$(LIBRARY_PREFIX)clang$(SHARED_LIBRARY_SUFFIX)*), \
      DEST := $(SUPPORT_OUTPUTDIR)/modules_libs/$(MODULE), \
      LINK_MACRO := link-file-relative \
  ))

  TARGETS += $(COPY_CLANG_LIB)

endif
