    static $type$ [[TEST]]($type$ a) {
        return ($type$)([[TEST_OP]]);
    }

    static $type$ strict[[TEST]]($type$ a) {
        return ($type$)(Strict[[TEST_OP]]);
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void [[TEST]]$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = new $type$[a.length];
        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$<Shapes.S$bits$Bit> av = SPECIES.fromArray(a, i);
                av.[[TEST]]().intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::[[TEST]], $vectorteststype$::strict[[TEST]]);
    }
