/*
 * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have
 * questions.
 */


import jdk.incubator.vector.Shapes;
import jdk.incubator.vector.Vector;
import jdk.incubator.vector.IntVector;
#if[MaxBit]
import java.lang.invoke.MethodHandles;
import java.lang.invoke.VarHandle;
#end[MaxBit]

import org.openjdk.jmh.annotations.Benchmark;

public class $vectorteststype$Perf {
#if[MaxBit]
    static final Vector.Shape S_Max_BIT = getMaxBit();

    static final $abstractvectortype$.$Type$Species<Vector.Shape> SPECIES =
                $Type$Vector.species(S_Max_BIT);
#else[MaxBit]
    static final $abstractvectortype$.$Type$Species<Vector.Shape> SPECIES =
                $Type$Vector.species(Shapes.S_$bits$_BIT);
#end[MaxBit]

    static final int INVOC_COUNT = Integer.getInteger("jdk.incubator.vector.test.loop-iterations", 100);
    static final int arr_length = Integer.getInteger("jdk.incubator.vector.test.array-length", 1000);

#if[MaxBit]
    static Vector.Shape getMaxBit() {
        try {
            Class<?> clazz = Class.forName("jdk.incubator.vector.Shapes$SMaxBit");
            VarHandle privateHandle = MethodHandles.privateLookupIn(Shapes.class, MethodHandles.lookup())
                .findStaticVarHandle(Shapes.class, "S_Max_BIT", clazz);
            return (Vector.Shape)(privateHandle.get());
        } catch (ClassNotFoundException | IllegalAccessException | NoSuchFieldException e) {
            throw new Error(e);
        }
    }

#end[MaxBit]
    static final IntFunction<$type$[]> fa = (vl) -> {
      int length = arr_length * vl;
      $type$[] arr = new $type$[length];
      for (int i = 0; i < length; i++) {
        arr[i] = ($type$)2*i;
      }

      return arr;
    };

    static final IntFunction<$type$[]> fb = (vl) -> {
      int length = arr_length * vl;
      $type$[] arr = new $type$[length];
      for (int i = 0; i < length; i++) {
        arr[i] = ($type$)i+1;
      }

      return arr;
    };

    static final IntFunction<$type$[]> fc = (vl) -> {
      int length = arr_length * vl;
      $type$[] arr = new $type$[length];
      for (int i = 0; i < length; i++) {
        arr[i] = ($type$)i+5;
      }

      return arr;
    };

