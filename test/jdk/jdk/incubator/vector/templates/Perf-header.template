/*
 * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have
 * questions.
 */

package benchmark.jdk.incubator.vector;

import jdk.incubator.vector.Shapes;
import jdk.incubator.vector.Vector;
import jdk.incubator.vector.$Type$Vector;
#if[MaxBit]
import java.lang.invoke.MethodHandles;
import java.lang.invoke.VarHandle;
#end[MaxBit]

import java.util.concurrent.TimeUnit;
import java.util.function.IntFunction;

import org.openjdk.jmh.annotations.*;

@BenchmarkMode(Mode.Throughput)
@OutputTimeUnit(TimeUnit.MILLISECONDS)
@State(Scope.Benchmark)
@Fork(value = 1, jvmArgsPrepend = {"--add-modules=jdk.incubator.vector"})
public class $vectorbenchtype$ extends AbstractVectorBenchmark {
#if[MaxBit]
    static final $abstractvectortype$.$Type$Species<Vector.Shape> SPECIES =
                $Type$Vector.species(getMaxBitShape());
#else[MaxBit]
    static final $abstractvectortype$.$Type$Species<Vector.Shape> SPECIES =
                $Type$Vector.species(Shapes.S_$bits$_BIT);
#end[MaxBit]

    @Param("1024")
    int arr_length;

    @Param("100")
    int INVOC_COUNT;

    final IntFunction<$type$[]> fa = (vl) -> {
      int length = arr_length * vl;
      $type$[] arr = new $type$[length];
      for (int i = 0; i < length; i++) {
        arr[i] = ($type$)(2*i);
      }
      return arr;
    };

    final IntFunction<$type$[]> fb = (vl) -> {
      int length = arr_length * vl;
      $type$[] arr = new $type$[length];
      for (int i = 0; i < length; i++) {
        arr[i] = ($type$)(i+1);
      }
      return arr;
    };

    final IntFunction<$type$[]> fc = (vl) -> {
      int length = arr_length * vl;
      $type$[] arr = new $type$[length];
      for (int i = 0; i < length; i++) {
        arr[i] = ($type$)(i+5);
      }
      return arr;
    };

    final IntFunction<boolean[]> fm = (vl) -> {
        int length = arr_length * vl;
        boolean[] arr = new boolean[length];
        for (int i = 0; i < length; i++) {
            arr[i] = (i % 2) == 0;
        }
        return arr;
    };

