
    @Test(dataProvider = "$type$BinaryOpMaskProvider", invocationCount = 10)
    static void [[TEST]]$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = new $type$[a.length];
        boolean[] mask = fm.apply(SPECIES.length());
        Vector.Mask<$Wideboxtype$, Shapes.S$bits$Bit> vmask = SPECIES.maskFromValues(mask);

        // Computation.
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$<Shapes.S$bits$Bit> av = SPECIES.fromArray(a, i);
            $abstractvectortype$<Shapes.S$bits$Bit> bv = SPECIES.fromArray(b, i);
            av.[[TEST]](bv, vmask).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::[[TEST]]);
    }
