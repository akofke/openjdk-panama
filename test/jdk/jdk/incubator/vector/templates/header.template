/*
 * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have
 * questions.
 */

/*
 * @test
 * @modules jdk.incubator.vector
 * @run testng $vectorteststype$
 *
 */

import jdk.incubator.vector.Shapes;
import jdk.incubator.vector.Vector;

#if[Byte]
import jdk.incubator.vector.ByteVector;
#end[Byte]
#if[Float]
import jdk.incubator.vector.FloatVector;
#end[Float]
#if[Int]
import jdk.incubator.vector.IntVector;
#end[Int]
#if[Double]
import jdk.incubator.vector.DoubleVector;
#end[Double]
#if[Short]
import jdk.incubator.vector.ShortVector;
#end[Short]
#if[Long]
import jdk.incubator.vector.LongVector;
#end[Long]

import org.testng.Assert;

@org.testng.annotations.Test
public class $vectorteststype$ {
    static final int SIZE = $bits$ * 1000;
    static final $abstractvectortype$.$Type$Species<Shapes.S$bits$Bit> species = ($abstractvectortype$.$Type$Species<Shapes.S$bits$Bit>)
                Vector.speciesInstance($Wideboxtype$.class, Shapes.S_$bits$_BIT);

    static void init_mask(boolean[] t, int size) {
        for (int i = 0; i < size; i++) {
          t[i] = (i%2 == 0);
        }
    }

    static void init_arr1($type$[] t) {
        for (int i = 0; i < t.length; i++) {
            t[i] = ($type$)(i*5);
        }
    }

    static void init_arr2($type$[] t) {
        for (int i = 0; i < t.length; i++) {
            t[i] = ((($type$)(i+1) == 0) ? 1 : ($type$)(i+1));
        }
    }

    static void init_5arr($type$[] t1, $type$[] t2, $type$[] t3, $type$[] t4, $type$[] t5) {
        assert(t1.length == t2.length && t2.length == t3.length && t3.length == t4.length && t4.length == t5.length);
#if[FP]
        $type$ corner1 = $Wideboxtype$.MAX_VALUE;
        $type$ corner2 = $Wideboxtype$.MIN_VALUE;
        $type$ corner3 = $Wideboxtype$.NEGATIVE_INFINITY;
        $type$ corner4 = $Wideboxtype$.POSITIVE_INFINITY;
        $type$ corner5 = $Wideboxtype$.NaN;
        $type$ corner6 = ($type$)0.0;
        $type$ corner7 = ($type$)-0.0;
#end[FP]
#if[BITWISE]
        $type$ corner1 = $Wideboxtype$.MAX_VALUE;
        $type$ corner2 = $Wideboxtype$.MIN_VALUE;
        $type$ corner3 = corner2;
        $type$ corner4 = corner1;
        $type$ corner5 = 0;
        $type$ corner6 = 0;
        $type$ corner7 = 0;
#end[BITWISE]


        for (int i = 0; i < t1.length; i++) {
            t1[i] = ($type$)(i);
            t2[i] = ($type$)(i+1);
            t3[i] = ($type$)(i-2);
            t4[i] = i%3 == 0 ? t1[i] : (i%3 == 1 ? t2[i] : t3[i]);
            switch(i%7) {
                case 0:
                    t5[i] = corner1;
                    break;
                case 1:
                    t5[i] = corner2;
                    break;
                case 2:
                    t5[i] = corner3;
                    break;
                case 3:
                    t5[i] = corner4;
                    break;
                case 4:
                    t5[i] = corner5;
                    break;
                case 5:
                    t5[i] = corner6;
                    break;
                default:
                    t5[i] = corner7;
                    break;
            }
        }
    }

    interface FUnOp {
        $type$ apply($type$ a);
    }

    static void assertArraysEquals($type$[] a, $type$[] r, FUnOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(f.apply(a[i]), r[i]);
            }
        } catch (AssertionError e) {
            Assert.assertEquals(f.apply(a[i]), r[i], "at index #" + i);
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] r, boolean[] mask, FUnOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(mask[i % species.length()] ? f.apply(a[i]) : a[i], r[i]);
            }
        } catch (AssertionError e) {
            Assert.assertEquals(mask[i % species.length()] ? f.apply(a[i]) : a[i], r[i], "at index #" + i);
        }
    }

    interface FBinOp {
        $type$ apply($type$ a, $type$ b);
    }

    interface FBinMaskOp {
        $type$ apply($type$ a, $type$ b, boolean m);

        static FBinMaskOp lift(FBinOp f) {
            return (a, b, m) -> m ? f.apply(a, b) : a;
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, FBinOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(f.apply(a[i], b[i]), r[i]);
            }
        } catch (AssertionError e) {
            Assert.assertEquals(f.apply(a[i], b[i]), r[i], "at index #" + i);
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinOp f) {
        assertArraysEquals(a, b, r, mask, FBinMaskOp.lift(f));
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinMaskOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(f.apply(a[i], b[i], mask[i % species.length()]), r[i]);
            }
        } catch (AssertionError err) {
            Assert.assertEquals(f.apply(a[i], b[i], mask[i % species.length()]), r[i], "at index #" + i + ", a[i] = " + a[i] + ", b[i] = " + b[i] + ", mask = " + mask[i % species.length()]);
        }
    }

