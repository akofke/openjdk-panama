/*
 * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have
 * questions.
 */

/*
 * @test
 * @modules jdk.incubator.vector
 * @run testng $vectorteststype$
 *
 */

import jdk.incubator.vector.Shapes;
import jdk.incubator.vector.Vector;

#if[Byte]
import jdk.incubator.vector.ByteVector;
#end[Byte]
#if[Float]
import jdk.incubator.vector.FloatVector;
#end[Float]
#if[Int]
import jdk.incubator.vector.IntVector;
#end[Int]
#if[Double]
import jdk.incubator.vector.DoubleVector;
#end[Double]
#if[Short]
import jdk.incubator.vector.ShortVector;
#end[Short]
#if[Long]
import jdk.incubator.vector.LongVector;
#end[Long]

import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.util.List;
import java.util.function.IntFunction;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Test
public class $vectorteststype$ extends AbstractVectorTest {

    static final $abstractvectortype$.$Type$Species<Shapes.S$bits$Bit> SPECIES =
                $Type$Vector.species(Shapes.S_$bits$_BIT);

    static final int INVOC_COUNT = Integer.getInteger("jdk.incubator.vector.test.loop-iterations", 10);

    interface FUnOp {
        $type$ apply($type$ a);
    }

    static void assertArraysEquals($type$[] a, $type$[] r, FUnOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(f.apply(a[i]), r[i]);
            }
        } catch (AssertionError e) {
            Assert.assertEquals(f.apply(a[i]), r[i], "at index #" + i);
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] r, boolean[] mask, FUnOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(mask[i % SPECIES.length()] ? f.apply(a[i]) : a[i], r[i]);
            }
        } catch (AssertionError e) {
            Assert.assertEquals(mask[i % SPECIES.length()] ? f.apply(a[i]) : a[i], r[i], "at index #" + i);
        }
    }

    interface FReductionOp {
      $type$ apply($type$[] a, int idx);
    }

    static void assertReductionArraysEquals($type$[] a, $type$[] b, FReductionOp f) {
      int i = 0;
      try {
        for (; i < a.length; i += SPECIES.length()) {
          Assert.assertEquals(f.apply(a, i), b[i]);
        }
      } catch (AssertionError e) {
        Assert.assertEquals(f.apply(a, i), b[i], "at index #" + i);
      }
    }

    interface FBinOp {
        $type$ apply($type$ a, $type$ b);
    }

    interface FBinMaskOp {
        $type$ apply($type$ a, $type$ b, boolean m);

        static FBinMaskOp lift(FBinOp f) {
            return (a, b, m) -> m ? f.apply(a, b) : a;
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, FBinOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(f.apply(a[i], b[i]), r[i]);
            }
        } catch (AssertionError e) {
            Assert.assertEquals(f.apply(a[i], b[i]), r[i], "at index #" + i);
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinOp f) {
        assertArraysEquals(a, b, r, mask, FBinMaskOp.lift(f));
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinMaskOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(f.apply(a[i], b[i], mask[i % SPECIES.length()]), r[i]);
            }
        } catch (AssertionError err) {
            Assert.assertEquals(f.apply(a[i], b[i], mask[i % SPECIES.length()]), r[i], "at index #" + i + ", a[i] = " + a[i] + ", b[i] = " + b[i] + ", mask = " + mask[i % SPECIES.length()]);
        }
    }
    
    static final List<IntFunction<$type$[]>> $TYPE$_GENERATORS = List.of(
            withToString("$type$[i * 5]", (int s) -> {
                return fill(s * 1000,
                            i -> ($type$)(i * 5));
            }),
            withToString("$type$[i + 1]", (int s) -> {
                return fill(s * 1000,
                            i -> ((($type$)(i + 1) == 0) ? 1 : ($type$)(i + 1)));
            })
    );

    // Create combinations of pairs
    // @@@ Might be sensitive to order e.g. div by 0
    static final List<List<IntFunction<$type$[]>>> $TYPE$_GENERATOR_PAIRS =
        Stream.of($TYPE$_GENERATORS.get(0)).
                flatMap(fa -> $TYPE$_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).
                collect(Collectors.toList());

    @DataProvider
    public Object[][] $type$BinaryOpProvider() {
        return $TYPE$_GENERATOR_PAIRS.stream().map(List::toArray).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$BinaryOpMaskProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
                flatMap(fm -> $TYPE$_GENERATOR_PAIRS.stream().map(lfa -> {
                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();
                })).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$UnaryOpProvider() {
        return $TYPE$_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$UnaryOpMaskProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
                flatMap(fm -> $TYPE$_GENERATORS.stream().map(fa -> {
                    return new Object[] {fa, fm};
                })).
                toArray(Object[][]::new);
    }

    static final List<IntFunction<$type$[]>> $TYPE$_COMPARE_GENERATORS = List.of(
            withToString("$type$[i]", (int s) -> {
                return fill(s * 1000,
                            i -> ($type$)i);
            }),
            withToString("$type$[i + 1]", (int s) -> {
                return fill(s * 1000,
                            i -> ($type$)(i + 1));
            }),
            withToString("$type$[i - 2]", (int s) -> {
                return fill(s * 1000,
                            i -> ($type$)(i - 2));
            }),
            withToString("$type$[zigZag(i)]", (int s) -> {
                return fill(s * 1000,
                            i -> i%3 == 0 ? ($type$)i : (i%3 == 1 ? ($type$)(i + 1) : ($type$)(i - 2)));
            }),
            withToString("$type$[cornerComparisonCase(i)]", (int s) -> {
                return fill(s * 1000,
                            i -> cornerComparisonCase(i));
            })
    );

    static final List<List<IntFunction<$type$[]>>> $TYPE$_COMPARE_GENERATOR_PAIRS =
        $TYPE$_COMPARE_GENERATORS.stream().
                flatMap(fa -> $TYPE$_COMPARE_GENERATORS.stream().map(fb -> List.of(fa, fb))).
                collect(Collectors.toList());

    @DataProvider
    public Object[][] $type$CompareOpProvider() {
        return $TYPE$_COMPARE_GENERATOR_PAIRS.stream().map(List::toArray).
                toArray(Object[][]::new);
    }

    interface To$Type$F {
        $type$ apply(int i);
    }

    static $type$[] fill(int s , To$Type$F f) {
        return fill(new $type$[s], f);
    }

    static $type$[] fill($type$[] a, To$Type$F f) {
        for (int i = 0; i < a.length; i++) {
            a[i] = f.apply(i);
        }
        return a;
    }
    
    static $type$ cornerComparisonCase(int i) {
#if[FP]
        switch(i % 7) {
            case 0:
                return $Wideboxtype$.MAX_VALUE;
            case 1:
                return $Wideboxtype$.MIN_VALUE;
            case 2:
                return $Wideboxtype$.NEGATIVE_INFINITY;
            case 3:
                return $Wideboxtype$.POSITIVE_INFINITY;
            case 4:
                return $Wideboxtype$.NaN;
            case 5:
                return ($type$)0.0;
            default:
                return ($type$)-0.0;
        }
#else[FP]
        switch(i % 5) {
            case 0:
                return $Wideboxtype$.MAX_VALUE;
            case 1:
                return $Wideboxtype$.MIN_VALUE;
            case 2:
                return $Wideboxtype$.MIN_VALUE;
            case 3:
                return $Wideboxtype$.MAX_VALUE;
            default:
                return ($type$)0;
        }
#end[FP]
    }

