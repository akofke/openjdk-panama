/*
 * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have
 * questions.
 */
package jdk.incubator.vector;

import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Objects;
import jdk.internal.vm.annotation.ForceInline;
import static jdk.incubator.vector.VectorIntrinsics.*;

@SuppressWarnings("cast")
final class $vectortype$ extends $abstractvectortype$<Shapes.$shape$> {
    static final $Type$$bits$Species SPECIES = new $Type$$bits$Species();

    static final $vectortype$ ZERO = new $vectortype$();

    static final int LENGTH = SPECIES.length();

    private final $type$[] vec; // Don't access directly, use getElements() instead.

    private $type$[] getElements() {
        return VectorIntrinsics.maybeRebox(this).vec;
    }

    $vectortype$() {
        vec = new $type$[SPECIES.length()];
    }

    $vectortype$($type$[] v) {
        vec = v;
    }

    @Override
    public int length() { return LENGTH; }

    // Unary operator

    @Override
    $vectortype$ uOp(FUnOp f) {
        $type$[] vec = getElements();
        $type$[] res = new $type$[length()];
        for (int i = 0; i < length(); i++) {
            res[i] = f.apply(i, vec[i]);
        }
        return new $vectortype$(res);
    }

    @Override
    $vectortype$ uOp(Mask<$Boxtype$, Shapes.$shape$> o, FUnOp f) {
        $type$[] vec = getElements();
        $type$[] res = new $type$[length()];
        boolean[] mbits = (($masktype$)o).getBits();
        for (int i = 0; i < length(); i++) {
            res[i] = mbits[i] ? f.apply(i, vec[i]) : vec[i];
        }
        return new $vectortype$(res);
    }

    // Binary operator

    @Override
    $vectortype$ bOp(Vector<$Boxtype$, Shapes.$shape$> o, FBinOp f) {
        $type$[] res = new $type$[length()];
        $type$[] vec1 = this.getElements();
        $type$[] vec2 = (($vectortype$)o).getElements();
        for (int i = 0; i < length(); i++) {
            res[i] = f.apply(i, vec1[i], vec2[i]);
        }
        return new $vectortype$(res);
    }

    @Override
    $vectortype$ bOp(Vector<$Boxtype$, Shapes.$shape$> o1, Mask<$Boxtype$, Shapes.$shape$> o2, FBinOp f) {
        $type$[] res = new $type$[length()];
        $type$[] vec1 = this.getElements();
        $type$[] vec2 = (($vectortype$)o1).getElements();
        boolean[] mbits = (($masktype$)o2).getBits();
        for (int i = 0; i < length(); i++) {
            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i]) : vec1[i];
        }
        return new $vectortype$(res);
    }

    // Trinary operator

    @Override
    $vectortype$ tOp(Vector<$Boxtype$, Shapes.$shape$> o1, Vector<$Boxtype$, Shapes.$shape$> o2, FTriOp f) {
        $type$[] res = new $type$[length()];
        $type$[] vec1 = this.getElements();
        $type$[] vec2 = (($vectortype$)o1).getElements();
        $type$[] vec3 = (($vectortype$)o2).getElements();
        for (int i = 0; i < length(); i++) {
            res[i] = f.apply(i, vec1[i], vec2[i], vec3[i]);
        }
        return new $vectortype$(res);
    }

    @Override
    $vectortype$ tOp(Vector<$Boxtype$, Shapes.$shape$> o1, Vector<$Boxtype$, Shapes.$shape$> o2, Mask<$Boxtype$, Shapes.$shape$> o3, FTriOp f) {
        $type$[] res = new $type$[length()];
        $type$[] vec1 = getElements();
        $type$[] vec2 = (($vectortype$)o1).getElements();
        $type$[] vec3 = (($vectortype$)o2).getElements();
        boolean[] mbits = (($masktype$)o3).getBits();
        for (int i = 0; i < length(); i++) {
            res[i] = mbits[i] ? f.apply(i, vec1[i], vec2[i], vec3[i]) : vec1[i];
        }
        return new $vectortype$(res);
    }

    @Override
    $type$ rOp($type$ v, FBinOp f) {
        $type$[] vec = getElements();
        for (int i = 0; i < length(); i++) {
            v = f.apply(i, v, vec[i]);
        }
        return v;
    }

    // Binary operations with scalars

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> add($type$ o) {
        return add(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> add($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return add(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> addSaturate($type$ o) {
        return addSaturate(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> addSaturate($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return addSaturate(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> sub($type$ o) {
        return sub(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> sub($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return sub(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> subSaturate($type$ o) {
        return subSaturate(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> subSaturate($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return subSaturate(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> mul($type$ o) {
        return mul(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> mul($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return mul(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> div($type$ o) {
        return div(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> div($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return div(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> min($type$ o) {
        return min(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> max($type$ o) {
        return max(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public Mask<$Boxtype$, Shapes.$shape$> equal($type$ o) {
        return equal(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public Mask<$Boxtype$, Shapes.$shape$> notEqual($type$ o) {
        return notEqual(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public Mask<$Boxtype$, Shapes.$shape$> lessThan($type$ o) {
        return lessThan(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public Mask<$Boxtype$, Shapes.$shape$> lessThanEq($type$ o) {
        return lessThanEq(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public Mask<$Boxtype$, Shapes.$shape$> greaterThan($type$ o) {
        return greaterThan(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public Mask<$Boxtype$, Shapes.$shape$> greaterThanEq($type$ o) {
        return greaterThanEq(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> blend($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return blend(SPECIES.broadcast(o), m);
    }

#if[FP]
    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> atan2($type$ o) {
        return atan2(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> atan2($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return atan2(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> pow($type$ o) {
        return pow(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> pow($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return pow(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> fma($type$ o1, $type$ o2) {
        return fma(SPECIES.broadcast(o1), SPECIES.broadcast(o2));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> fma($type$ o1, $type$ o2, Mask<$Boxtype$,Shapes.$shape$> m) {
        return fma(SPECIES.broadcast(o1), SPECIES.broadcast(o2), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> hypot($type$ o) {
        return hypot(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> hypot($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return hypot(SPECIES.broadcast(o), m);
    }
#end[FP]

#if[BITWISE]
    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> and($type$ o) {
        return and(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> and($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return and(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> or($type$ o) {
        return or(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> or($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return or(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> xor($type$ o) {
        return xor(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> xor($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return xor(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> floorDiv($type$ o) {
        return floorDiv(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> floorDiv($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return floorDiv(SPECIES.broadcast(o), m);
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> floorMod($type$ o) {
        return floorMod(SPECIES.broadcast(o));
    }

    @Override
    @ForceInline
    public $abstractvectortype$<Shapes.$shape$> floorMod($type$ o, Mask<$Boxtype$,Shapes.$shape$> m) {
        return floorMod(SPECIES.broadcast(o), m);
    }
#end[BITWISE]


    // Unary operations

#if[intOrFP]
    @Override
    @ForceInline
    public $vectortype$ abs() {
        return ($vectortype$) VectorIntrinsics.unaryOp(
            VECTOR_OP_ABS, $vectortype$.class, $type$.class, LENGTH,
            this,
            v1 -> (($vectortype$)v1).uOp((i, a) -> ($type$) Math.abs(a)));
    }

    @Override
    @ForceInline
    public $vectortype$ neg() {
        return ($vectortype$) VectorIntrinsics.unaryOp(
            VECTOR_OP_NEG, $vectortype$.class, $type$.class, LENGTH,
            this,
            v1 -> (($vectortype$)v1).uOp((i, a) -> ($type$) -a));
    }
#end[intOrFP]

#if[FP]
    @Override
    @ForceInline
    public $vectortype$ sqrt() {
        return ($vectortype$) VectorIntrinsics.unaryOp(
            VECTOR_OP_SQRT, $vectortype$.class, $type$.class, LENGTH,
            this,
            v1 -> (($vectortype$)v1).uOp((i, a) -> ($type$) Math.sqrt((double) a)));
    }
#end[FP]

    // Binary operations

    @Override
    @ForceInline
    public $vectortype$ add(Vector<$Boxtype$,Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;
        return ($vectortype$) VectorIntrinsics.binaryOp(
            VECTOR_OP_ADD, $vectortype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> (($vectortype$)v1).bOp(v2, (i, a, b) -> ($type$)(a + b)));
    }

    @Override
    @ForceInline
    public $vectortype$ sub(Vector<$Boxtype$,Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;
        return ($vectortype$) VectorIntrinsics.binaryOp(
            VECTOR_OP_SUB, $vectortype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> (($vectortype$)v1).bOp(v2, (i, a, b) -> ($type$)(a - b)));
    }

    @Override
    @ForceInline
    public $vectortype$ mul(Vector<$Boxtype$,Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;
        return ($vectortype$) VectorIntrinsics.binaryOp(
            VECTOR_OP_MUL, $vectortype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> (($vectortype$)v1).bOp(v2, (i, a, b) -> ($type$)(a * b)));
    }

    @Override
    @ForceInline
    public $vectortype$ div(Vector<$Boxtype$,Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;
        return ($vectortype$) VectorIntrinsics.binaryOp(
            VECTOR_OP_DIV, $vectortype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> (($vectortype$)v1).bOp(v2, (i, a, b) -> ($type$)(a / b)));
    }

#if[intOrFP]
    @Override
    @ForceInline
    public $vectortype$ add(Vector<$Boxtype$,Shapes.$shape$> v, Mask<$Boxtype$, Shapes.$shape$> m) {
        // TODO: use better default impl: bOp(o, m, (i, a, b) -> ($type$)(a + b));
        return blend(add(v), m);
    }

    @Override
    @ForceInline
    public $vectortype$ sub(Vector<$Boxtype$,Shapes.$shape$> v, Mask<$Boxtype$, Shapes.$shape$> m) {
        // TODO: use better default impl: bOp(o, m, (i, a, b) -> ($type$)(a - b));
        return blend(sub(v), m);
    }

    @Override
    @ForceInline
    public $vectortype$ mul(Vector<$Boxtype$,Shapes.$shape$> v, Mask<$Boxtype$, Shapes.$shape$> m) {
        // TODO: use better default impl: bOp(o, m, (i, a, b) -> ($type$)(a * b));
        return blend(mul(v), m);
    }
#end[intOrFP]

#if[FP]
    @Override
    @ForceInline
    public $vectortype$ div(Vector<$Boxtype$,Shapes.$shape$> v, Mask<$Boxtype$, Shapes.$shape$> m) {
        // TODO: use better default impl: bOp(o, m, (i, a, b) -> ($type$)(a / b));
        return blend(div(v), m);
    }
#end[FP]

#if[BITWISE]
    @Override
    @ForceInline
    public $vectortype$ and(Vector<$Boxtype$,Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;
        return ($vectortype$) VectorIntrinsics.binaryOp(
            VECTOR_OP_AND, $vectortype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> (($vectortype$)v1).bOp(v2, (i, a, b) -> ($type$)(a & b)));
    }

    @Override
    @ForceInline
    public $vectortype$ or(Vector<$Boxtype$,Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;
        return ($vectortype$) VectorIntrinsics.binaryOp(
            VECTOR_OP_OR, $vectortype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> (($vectortype$)v1).bOp(v2, (i, a, b) -> ($type$)(a | b)));
    }

    @Override
    @ForceInline
    public $vectortype$ xor(Vector<$Boxtype$,Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;
        return ($vectortype$) VectorIntrinsics.binaryOp(
            VECTOR_OP_XOR, $vectortype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> (($vectortype$)v1).bOp(v2, (i, a, b) -> ($type$)(a ^ b)));
    }

    @Override
    @ForceInline
    public $vectortype$ and(Vector<$Boxtype$,Shapes.$shape$> v, Mask<$Boxtype$, Shapes.$shape$> m) {
        return blend(and(v), m);
    }

    @Override
    @ForceInline
    public $vectortype$ or(Vector<$Boxtype$,Shapes.$shape$> v, Mask<$Boxtype$, Shapes.$shape$> m) {
        return blend(or(v), m);
    }

    @Override
    @ForceInline
    public $vectortype$ xor(Vector<$Boxtype$,Shapes.$shape$> v, Mask<$Boxtype$, Shapes.$shape$> m) {
        return blend(xor(v), m);
    }

    @Override
    @ForceInline
    public $vectortype$ shiftL(int s) {
        return ($vectortype$) VectorIntrinsics.broadcastInt(
            VECTOR_OP_LSHIFT, $vectortype$.class, $type$.class, LENGTH,
            this, s,
            (v, i) -> v.uOp((__, a) -> ($type$) (a << i)));
    }

    @Override
    @ForceInline
    public $vectortype$ shiftR(int s) {
        return ($vectortype$) VectorIntrinsics.broadcastInt(
            VECTOR_OP_URSHIFT, $vectortype$.class, $type$.class, LENGTH,
            this, s,
            (v, i) -> v.uOp((__, a) -> ($type$) (a >>> i)));
    }

    @Override
    @ForceInline
    public $vectortype$ aShiftR(int s) {
        return ($vectortype$) VectorIntrinsics.broadcastInt(
            VECTOR_OP_RSHIFT, $vectortype$.class, $type$.class, LENGTH,
            this, s,
            (v, i) -> v.uOp((__, a) -> ($type$) (a >> i)));
    }
#end[BITWISE]

    // Ternary operations

#if[FP]
    @Override
    @ForceInline
    public $vectortype$ fma(Vector<$Boxtype$,Shapes.$shape$> o1, Vector<$Boxtype$,Shapes.$shape$> o2) {
        Objects.requireNonNull(o1);
        Objects.requireNonNull(o2);
        $vectortype$ v1 = ($vectortype$)o1;
        $vectortype$ v2 = ($vectortype$)o2;
        return ($vectortype$) VectorIntrinsics.ternaryOp(
            VECTOR_OP_FMA, $vectortype$.class, $type$.class, LENGTH,
            this, v1, v2,
            (w1, w2, w3) -> w1.tOp(w2, w3, (i, a, b, c) -> Math.fma(a, b, c)));
    }
#end[FP]

    // Type specific horizontal reductions

#if[intOrlong]
    @Override
    @ForceInline
    public $type$ addAll() {
        return ($type$) VectorIntrinsics.reductionCoerced(
            VECTOR_OP_ADD, $vectortype$.class, $type$.class, LENGTH,
            this,
            v -> (long) v.rOp(($type$) 0, (i, a, b) -> ($type$) (a + b)));
    }

    @Override
    @ForceInline
    public $type$ mulAll() {
        return ($type$) VectorIntrinsics.reductionCoerced(
            VECTOR_OP_MUL, $vectortype$.class, $type$.class, LENGTH,
            this,
            v -> (long) v.rOp(($type$) 1, (i, a, b) -> ($type$) (a * b)));
    }
#end[intOrlong]
#if[FP]
    @Override
    @ForceInline
    public $type$ addAll() {
        $bitstype$ bits = ($bitstype$) VectorIntrinsics.reductionCoerced(
                                VECTOR_OP_ADD, $vectortype$.class, $type$.class, LENGTH,
                                this,
                                v -> {
                                    $type$ r = v.rOp(($type$) 0, (i, a, b) -> ($type$) (a + b));
                                    return (long)$Type$.$type$To$Bitstype$Bits(r);
                                });
        return $Type$.$bitstype$BitsTo$Fptype$(bits);
    }

    @Override
    @ForceInline
    public $type$ mulAll() {
        $bitstype$ bits = ($bitstype$) VectorIntrinsics.reductionCoerced(
                                VECTOR_OP_MUL, $vectortype$.class, $type$.class, LENGTH,
                                this,
                                v -> {
                                    $type$ r = v.rOp(($type$) 1, (i, a, b) -> ($type$) (a * b));
                                    return (long)$Type$.$type$To$Bitstype$Bits(r);
                                });
        return $Type$.$bitstype$BitsTo$Fptype$(bits);
    }
#end[FP]

    // Memory operations

    @Override
    @ForceInline
    public void intoArray($type$[] a, int ix) {
        Objects.requireNonNull(a);
        ix = VectorIntrinsics.checkIndex(ix, a.length, LENGTH);
        VectorIntrinsics.store($vectortype$.class, $type$.class, LENGTH,
                               a, ix, this,
                               (arr, idx, v) -> v.forEach((i, a_) -> (($type$[])arr)[idx + i] = a_));
    }

    @Override
    @ForceInline
    public void intoArray($type$[] a, int ax, Mask<$Boxtype$, Shapes.$shape$> m) {
        // TODO: use better default impl: forEach(m, (i, a_) -> a[ax + i] = a_);
        $vectortype$ oldVal = SPECIES.fromArray(a, ax);
        $vectortype$ newVal = oldVal.blend(this, m);
        newVal.intoArray(a, ax);
    }

    //

    @Override
    public String toString() {
        return Arrays.toString(getElements());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || this.getClass() != o.getClass()) return false;

        $vectortype$ that = ($vectortype$) o;
        return Arrays.equals(this.getElements(), that.getElements());
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(vec);
    }

    // Binary test

    @Override
    $masktype$ bTest(Vector<$Boxtype$, Shapes.$shape$> o, FBinTest f) {
        $type$[] vec1 = getElements();
        $type$[] vec2 = (($vectortype$)o).getElements();
        boolean[] bits = new boolean[length()];
        for (int i = 0; i < length(); i++){
            bits[i] = f.apply(i, vec1[i], vec2[i]);
        }
        return new $masktype$(bits);
    }

    // Comparisons

#if[intOrFloat]
    @Override
    @ForceInline
    public $masktype$ equal(Vector<$Boxtype$, Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;

        return ($masktype$) VectorIntrinsics.compare(
            BT_eq, $vectortype$.class, $masktype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> v1.bTest(v2, (i, a, b) -> a == b));
    }

    @Override
    @ForceInline
    public $masktype$ notEqual(Vector<$Boxtype$, Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;

        return ($masktype$) VectorIntrinsics.compare(
            BT_ne, $vectortype$.class, $masktype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> v1.bTest(v2, (i, a, b) -> a != b));
    }

    @Override
    @ForceInline
    public $masktype$ lessThan(Vector<$Boxtype$, Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;

        return ($masktype$) VectorIntrinsics.compare(
            BT_lt, $vectortype$.class, $masktype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> v1.bTest(v2, (i, a, b) -> a < b));
    }

    @Override
    @ForceInline
    public $masktype$ lessThanEq(Vector<$Boxtype$, Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;

        return ($masktype$) VectorIntrinsics.compare(
            BT_le, $vectortype$.class, $masktype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> v1.bTest(v2, (i, a, b) -> a <= b));
    }

    @Override
    @ForceInline
    public $masktype$ greaterThan(Vector<$Boxtype$, Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;

        return ($masktype$) VectorIntrinsics.compare(
            BT_gt, $vectortype$.class, $masktype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> v1.bTest(v2, (i, a, b) -> a > b));
    }

    @Override
    @ForceInline
    public $masktype$ greaterThanEq(Vector<$Boxtype$, Shapes.$shape$> o) {
        Objects.requireNonNull(o);
        $vectortype$ v = ($vectortype$)o;

        return ($masktype$) VectorIntrinsics.compare(
            BT_ge, $vectortype$.class, $masktype$.class, $type$.class, LENGTH,
            this, v,
            (v1, v2) -> v1.bTest(v2, (i, a, b) -> a >= b));
    }
#end[intOrFloat]

    // Foreach

    @Override
    void forEach(FUnCon f) {
        $type$[] vec = getElements();
        for (int i = 0; i < length(); i++) {
            f.apply(i, vec[i]);
        }
    }

    @Override
    void forEach(Mask<$Boxtype$, Shapes.$shape$> o, FUnCon f) {
        boolean[] mbits = (($masktype$)o).getBits();
        forEach((i, a) -> {
            if (mbits[i]) { f.apply(i, a); }
        });
    }

#if[FP]
    $bitsvectortype$ toBits() {
        $type$[] vec = getElements();
        $bitstype$[] res = new $bitstype$[this.species().length()];
        for(int i = 0; i < this.species().length(); i++){
            res[i] = $Type$.$type$To$Bitstype$Bits(vec[i]);
        }
        return new $bitsvectortype$(res);
    }
#end[FP]

#if[intOrlong]
    $fpvectortype$ toFP() {
        $type$[] vec = getElements();
        $fptype$[] res = new $fptype$[this.species().length()];
        for(int i = 0; i < this.species().length(); i++){
            res[i] = $Boxfptype$.$bitstype$BitsTo$Fptype$(vec[i]);
        }
        return new $fpvectortype$(res);
    }
#end[intOrlong]

    @Override
    public $vectortype$ rotateEL(int j) {
        $type$[] vec = getElements();
        $type$[] res = new $type$[length()];
        for (int i = 0; i < length(); i++){
            res[j + i % length()] = vec[i];
        }
        return new $vectortype$(res);
    }

    @Override
    public $vectortype$ rotateER(int j) {
        $type$[] vec = getElements();
        $type$[] res = new $type$[length()];
        for (int i = 0; i < length(); i++){
            int z = i - j;
            if(j < 0) {
                res[length() + z] = vec[i];
            } else {
                res[z] = vec[i];
            }
        }
        return new $vectortype$(res);
    }

    @Override
    public $vectortype$ shiftEL(int j) {
        $type$[] vec = getElements();
        $type$[] res = new $type$[length()];
        for (int i = 0; i < length() - j; i++) {
            res[i] = vec[i + j];
        }
        return new $vectortype$(res);
    }

    @Override
    public $vectortype$ shiftER(int j) {
        $type$[] vec = getElements();
        $type$[] res = new $type$[length()];
        for (int i = 0; i < length() - j; i++){
            res[i + j] = vec[i];
        }
        return new $vectortype$(res);
    }

    @Override
    public $vectortype$ shuffle(Vector<$Boxtype$, Shapes.$shape$> o, Shuffle<$Boxtype$, Shapes.$shape$> s) {
        $vectortype$ v = ($vectortype$) o;
        return uOp((i, a) -> {
            $type$[] vec = this.getElements();
            int e = s.getElement(i);
            if(e >= 0 && e < length()) {
                //from this
                return vec[e];
            } else if(e < length() * 2) {
                //from o
                return v.getElements()[e - length()];
            } else {
                throw new ArrayIndexOutOfBoundsException("Bad reordering for shuffle");
            }
        });
    }

    @Override
    public $vectortype$ swizzle(Shuffle<$Boxtype$, Shapes.$shape$> s) {
        return uOp((i, a) -> {
            $type$[] vec = this.getElements();
            int e = s.getElement(i);
            if(e >= 0 && e < length()) {
                return vec[e];
            } else {
                throw new ArrayIndexOutOfBoundsException("Bad reordering for shuffle");
            }
        });
    }

    @Override
    @ForceInline
    public $vectortype$ blend(Vector<$Boxtype$, Shapes.$shape$> o1, Mask<$Boxtype$, Shapes.$shape$> o2) {
        Objects.requireNonNull(o1);
        Objects.requireNonNull(o2);
        $vectortype$ v = ($vectortype$)o1;
        $masktype$   m = ($masktype$)o2;

        return ($vectortype$) VectorIntrinsics.blend(
            $vectortype$.class, $masktype$.class, $type$.class, LENGTH,
            this, v, m,
            (v1, v2, m_) -> v1.bOp(v2, (i, a, b) -> m_.getElement(i) ? b : a));
    }

    @Override
    @ForceInline
    @SuppressWarnings("unchecked")
    public <F> Vector<F, Shapes.$shape$> rebracket(Class<F> type) {
        Objects.requireNonNull(type);
        // TODO: check proper element type
        return VectorIntrinsics.rebracket(
            $vectortype$.class, $type$.class, LENGTH,
            type, this,
            (v, t) -> (Vector<F, Shapes.$shape$>) v.reshape(t, v.shape())
        );
    }

    @Override
    public <F, Z extends Shape> Vector<F, Z> cast(Class<F> type, Z shape) {
        Vector.Species<F,Z> species = Vector.speciesInstance(type, shape);

        // Whichever is larger
        int blen = Math.max(species.bitSize(), bitSize()) / Byte.SIZE;
        ByteBuffer bb = ByteBuffer.allocate(blen);

        int limit = Math.min(species.length(), length());

        $type$[] vec = getElements();
        if (type == Byte.class) {
            for (int i = 0; i < limit; i++){
                bb.put(i, (byte) vec[i]);
            }
        } else if (type == Short.class) {
            for (int i = 0; i < limit; i++){
                bb.asShortBuffer().put(i, (short) vec[i]);
            }
        } else if (type == Integer.class) {
            for (int i = 0; i < limit; i++){
                bb.asIntBuffer().put(i, (int) vec[i]);
            }
        } else if (type == Long.class){
            for (int i = 0; i < limit; i++){
                bb.asLongBuffer().put(i, (long) vec[i]);
            }
        } else if (type == Float.class){
            for (int i = 0; i < limit; i++){
                bb.asFloatBuffer().put(i, (float) vec[i]);
            }
        } else if (type == Double.class){
            for (int i = 0; i < limit; i++){
                bb.asDoubleBuffer().put(i, (double) vec[i]);
            }
        } else {
            throw new UnsupportedOperationException("Bad lane type for casting.");
        }

        return species.fromByteBuffer(bb);
    }

    // Accessors

    @Override
    public $type$ get(int i) {
        $type$[] vec = getElements();
        return vec[i];
    }

    @Override
    public $vectortype$ with(int i, $type$ e) {
        $type$[] res = vec.clone();
        res[i] = e;
        return new $vectortype$(res);
    }

    // Mask

    static final class $masktype$ extends AbstractMask<$Boxtype$, Shapes.$shape$> {
        static final $masktype$ TRUE_MASK = new $masktype$(true);
        static final $masktype$ FALSE_MASK = new $masktype$(false);

        public $masktype$(boolean[] bits) {
            super(bits);
        }

        public $masktype$(boolean val) {
            super(val);
        }

        @Override
        $masktype$ uOp(MUnOp f) {
            boolean[] res = new boolean[species().length()];
            boolean[] bits = getBits();
            for (int i = 0; i < species().length(); i++) {
                res[i] = f.apply(i, bits[i]);
            }
            return new $masktype$(res);
        }

        @Override
        $masktype$ bOp(Mask<$Boxtype$, Shapes.$shape$> o, MBinOp f) {
            boolean[] res = new boolean[species().length()];
            boolean[] bits = getBits();
            boolean[] mbits = (($masktype$)o).getBits();
            for (int i = 0; i < species().length(); i++) {
                res[i] = f.apply(i, bits[i], mbits[i]);
            }
            return new $masktype$(res);
        }

        @Override
        public $Type$$bits$Species species() {
            return SPECIES;
        }

        @Override
        public $vectortype$ toVector() {
            $type$[] res = new $type$[species().length()];
            boolean[] bits = getBits();
            for (int i = 0; i < species().length(); i++) {
                res[i] = ($type$) (bits[i] ? -1 : 0);
            }
            return new $vectortype$(res);
        }

        @Override
        @ForceInline
        @SuppressWarnings("unchecked")
        public <Z> Mask<Z, Shapes.$shape$> rebracket(Class<Z> type) {
            Objects.requireNonNull(type);
            // TODO: check proper element type
            return VectorIntrinsics.rebracket(
                $masktype$.class, $type$.class, LENGTH,
                type, this,
                (m, t) -> (Mask<Z, Shapes.$shape$>)m.reshape(t, m.species().shape())
            );
        }

        // Unary operations

        //Mask<E, S> not();

        // Binary operations

        @Override
        @ForceInline
        public $masktype$ and(Mask<$Boxtype$,Shapes.$shape$> o) {
            Objects.requireNonNull(o);
            $masktype$ m = ($masktype$)o;
            return VectorIntrinsics.binaryOp(VECTOR_OP_AND, $masktype$.class, $bitstype$.class, LENGTH,
                                             this, m,
                                             (m1, m2) -> m1.bOp(m2, (i, a, b) -> a & b));
        }

        @Override
        @ForceInline
        public $masktype$ or(Mask<$Boxtype$,Shapes.$shape$> o) {
            Objects.requireNonNull(o);
            $masktype$ m = ($masktype$)o;
            return VectorIntrinsics.binaryOp(VECTOR_OP_OR, $masktype$.class, $bitstype$.class, LENGTH,
                                             this, m,
                                             (m1, m2) -> m1.bOp(m2, (i, a, b) -> a | b));
        }

        // Reductions

        @Override
        @ForceInline
        public boolean anyTrue() {
            return VectorIntrinsics.test(COND_notZero, $masktype$.class, $bitstype$.class, LENGTH,
                                         this, this,
                                         (m1, m2) -> super.anyTrue());
        }

        @Override
        @ForceInline
        public boolean allTrue() {
            return VectorIntrinsics.test(COND_carrySet, $masktype$.class, $bitstype$.class, LENGTH,
                                         this, species().trueMask(),
                                         (m1, m2) -> super.allTrue());
        }
    }

    // Shuffle

    static final class $shuffletype$ extends AbstractShuffle<$Boxtype$, Shapes.$shape$> {
        static final IntVector.IntSpecies<Shapes.$shape$> INT_SPECIES = (IntVector.IntSpecies<Shapes.$shape$>) Vector.speciesInstance(Integer.class, Shapes.$Shape$);

        public $shuffletype$(int[] reorder) {
            super(reorder);
        }

        @Override
        public $Type$$bits$Species species() {
            return SPECIES;
        }

        @Override
        public IntVector.IntSpecies<Shapes.$shape$> intSpecies() {
            return INT_SPECIES;
        }
    }

    // Species

    @Override
    public $Type$$bits$Species species() {
        return SPECIES;
    }

    static final class $Type$$bits$Species extends $Type$Species<Shapes.$shape$> {
        static final int BIT_SIZE = Shapes.$Shape$.bitSize();

        static final int LENGTH = BIT_SIZE / $Boxtype$.SIZE;

        @Override
        public String toString() {
           StringBuilder sb = new StringBuilder("Shape[");
           sb.append(bitSize()).append(" bits, ");
           sb.append(length()).append(" ").append($type$.class.getSimpleName()).append("s x ");
           sb.append(elementSize()).append(" bits");
           sb.append("]");
           return sb.toString();
        }

        @Override
        public int bitSize() {
            return BIT_SIZE;
        }

        @Override
        public int length() {
            return LENGTH;
        }

        @Override
        public Class<$Boxtype$> elementType() {
            return $Boxtype$.class;
        }

        @Override
        public int elementSize() {
            return $Boxtype$.SIZE;
        }

        @Override
        public Shapes.$shape$ shape() {
            return Shapes.$Shape$;
        }

        @Override
        $vectortype$ op(FOp f) {
            $type$[] res = new $type$[length()];
            for (int i = 0; i < length(); i++) {
                res[i] = f.apply(i);
            }
            return new $vectortype$(res);
        }

        @Override
        $vectortype$ op(Mask<$Boxtype$, Shapes.$shape$> o, FOp f) {
            $type$[] res = new $type$[length()];
            boolean[] mbits = (($masktype$)o).getBits();
            for (int i = 0; i < length(); i++) {
                if (mbits[i]) {
                    res[i] = f.apply(i);
                }
            }
            return new $vectortype$(res);
        }

        // Factories

        @Override
        public $masktype$ constantMask(boolean... bits) {
            return new $masktype$(bits.clone());
        }

        @Override
        public $shuffletype$ constantShuffle(int... ixs) {
            return new $shuffletype$(ixs);
        }

#if[FP]
        @Override
        @ForceInline
        public $vectortype$ zero() {
            return VectorIntrinsics.broadcastCoerced($vectortype$.class, $type$.class, LENGTH,
                                                     $Type$.$type$To$Bitstype$Bits(0.0f),
                                                     (z -> ZERO));
        }

        @Override
        @ForceInline
        public $vectortype$ broadcast($type$ e) {
            return VectorIntrinsics.broadcastCoerced(
                $vectortype$.class, $type$.class, LENGTH,
                $Type$.$type$To$Bitstype$Bits(e),
                ((long bits) -> SPECIES.op(i -> $Type$.$bitstype$BitsTo$Type$(($bitstype$)bits))));
        }
#end[FP]
#if[BITWISE]
        @Override
        @ForceInline
        public $vectortype$ zero() {
            return VectorIntrinsics.broadcastCoerced($vectortype$.class, $type$.class, LENGTH,
                                                     0,
                                                     (z -> ZERO));
        }

        @Override
        @ForceInline
        public $vectortype$ broadcast($type$ e) {
            return VectorIntrinsics.broadcastCoerced(
                $vectortype$.class, $type$.class, LENGTH,
                e,
                ((long bits) -> SPECIES.op(i -> ($type$)bits)));
        }
#end[BITWISE]

        @Override
        @ForceInline
        public $masktype$ trueMask() {
            return VectorIntrinsics.broadcastCoerced($masktype$.class, $bitstype$.class, LENGTH,
                                                     ($bitstype$)-1,
                                                     (z -> $masktype$.TRUE_MASK));
        }

        @Override
        @ForceInline
        public $masktype$ falseMask() {
            return VectorIntrinsics.broadcastCoerced($masktype$.class, $bitstype$.class, LENGTH,
                                                     0,
                                                     (z -> $masktype$.FALSE_MASK));
        }

        @Override
        @ForceInline
        public $vectortype$ fromArray($type$[] a, int ix) {
            Objects.requireNonNull(a);
            ix = VectorIntrinsics.checkIndex(ix, a.length, LENGTH);
            return ($vectortype$) VectorIntrinsics.load($vectortype$.class, $type$.class, LENGTH,
                                                        a, ix,
                                                        (arr, idx) -> super.fromArray(($type$[]) arr, idx));
        }

        @Override
        @ForceInline
        public $vectortype$ fromArray($type$[] a, int ax, Mask<$Boxtype$, Shapes.$shape$> m) {
            return zero().blend(fromArray(a, ax), m); // TODO: use better default impl: op(m, i -> a[ax + i]);
        }
    }
}
